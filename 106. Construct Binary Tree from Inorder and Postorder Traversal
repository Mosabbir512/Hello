/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode * buildTree(vector<int>&postorder,int postS,int postE,
    vector<int>&inorder,int inS,int inE,map<int,int>&inMap){
        if(postS>postE || inS>inE)return NULL;
        TreeNode * root=new TreeNode(postorder[postE]);
        int inRoot=inMap[root->val];
        int numsleft=inE-inRoot;
        root->right=buildTree(postorder,postE-1-numsleft,postE-1,inorder,inRoot+1,inE,inMap);
        root->left=buildTree(postorder,postS,postE-1-numsleft,inorder,inS,inRoot-1,inMap);
        return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        map<int,int>inMap;
        for(int i=0;i<inorder.size();i++){
            inMap[inorder[i]]=i;
        }
        TreeNode * root=buildTree(postorder,0,postorder.size()-1,inorder,0,inorder.size()-1,inMap);
        return root;
    }
};
