class Solution {
public:
    vector<pair<int,int>>mp;
    int n,m;
    bool dfs(int i,int j,vector<vector<char>>&board){
        bool y=true;
        if(i==0 || j==0 || i==n-1 || j==m-1)return false;
        mp.push_back({i,j});
        board[i][j]='X';
        if(board[i][j+1]=='O')y&=dfs(i,j+1,board);
        if(board[i][j-1]=='O')y&=dfs(i,j-1,board);
        if(board[i+1][j]=='O')y&=dfs(i+1,j,board);
        if(board[i-1][j]=='O')y&=dfs(i-1,j,board);
        // board[i][j]='O';
        return y;
    }
    void solve(vector<vector<char>>& board) {
        n=board.size(),m=board[0].size();
        for(int i=1;i<board.size()-1;i++){
            for(int j=1;j<board[0].size()-1;++j){
                 mp.clear();
                 bool yes=false;
                if(board[i][j]=='O')
                yes=dfs(i,j,board);
                if(yes){
                    continue;
                }
                else {
                    sort(mp.begin(),mp.end());
                    cout<<"Mosabbir ----"<<endl;;
                    for(auto it:mp){
                        cout<<it.first<<" "<<it.second<<endl;
                        int x=it.first,y=it.second;
                        board[x][y]='O';
                    }cout<<endl;
                }
            }
        }
    }
};
