/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left),
 * right(right) {}
 * };
 */
class Solution {
public:
    

    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        map<int, int> inMap;
        for (int i = 0; i < inorder.size(); i++) {
            inMap[inorder[i]] = i;
        }
        TreeNode* root = buildTree(preorder, 0, preorder.size() - 1, inorder, 0,
                                   inorder.size() - 1, inMap);
        return root;
    }

    TreeNode* buildTree(vector<int>& preorder, int preS, int preEnd,
                        vector<int>& inorder, int inS, int inEnd,
                        map<int, int> &inMap) {
            if(preS>preEnd || inS>inEnd)return NULL;
            TreeNode *root =new TreeNode(preorder[preS]);

            int inRoot=inMap[root->val];
            int numsleft=inRoot-inS;

            root->left=buildTree(preorder,preS+1,preS+numsleft,
                                inorder,inS,inRoot-1,inMap);
            root->right=buildTree(preorder,preS+numsleft+1,preEnd,
                                inorder,inRoot+1,inEnd,inMap);
            return root;
    }
};
